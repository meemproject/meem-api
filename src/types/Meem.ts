/* eslint-disable */
import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction, BaseContract, ContractTransaction, Overrides, PayableOverrides, CallOverrides, Event, Contract, utils } from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';


/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */







export type MeemPermissionStruct = {
  permission: BigNumberish;
  addresses: string[];
  numTokens: BigNumberish;
  costWei: BigNumberish;
  mintStartTimestamp: BigNumberish;
  mintEndTimestamp: BigNumberish;
};

export type MeemPermissionStructOutput = [
  number,
  string[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  permission: number;
  addresses: string[];
  numTokens: BigNumber;
  costWei: BigNumber;
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
};

export type SplitStruct = {
  toAddress: string;
  amount: BigNumberish;
  lockedBy: string;
};

export type SplitStructOutput = [string, BigNumber, string] & {
  toAddress: string;
  amount: BigNumber;
  lockedBy: string;
};

export type ContractInfoStruct = {
  symbol: string;
  name: string;
  contractURI: string;
  maxSupply: BigNumberish;
  mintPermissions: MeemPermissionStruct[];
  splits: SplitStruct[];
  isTransferLocked: boolean;
};

export type ContractInfoStructOutput = [
  string,
  string,
  string,
  BigNumber,
  MeemPermissionStructOutput[],
  SplitStructOutput[],
  boolean
] & {
  symbol: string;
  name: string;
  contractURI: string;
  maxSupply: BigNumber;
  mintPermissions: MeemPermissionStructOutput[];
  splits: SplitStructOutput[];
  isTransferLocked: boolean;
};

export type SetRoleItemStruct = {
  user: string;
  role: BytesLike;
  hasRole: boolean;
};

export type SetRoleItemStructOutput = [string, string, boolean] & {
  user: string;
  role: string;
  hasRole: boolean;
};

export type InitParamsStruct = {
  symbol: string;
  name: string;
  contractURI: string;
  roles: SetRoleItemStruct[];
  maxSupply: BigNumberish;
  mintPermissions: MeemPermissionStruct[];
  splits: SplitStruct[];
  isTransferLocked: boolean;
};

export type InitParamsStructOutput = [
  string,
  string,
  string,
  SetRoleItemStructOutput[],
  BigNumber,
  MeemPermissionStructOutput[],
  SplitStructOutput[],
  boolean
] & {
  symbol: string;
  name: string;
  contractURI: string;
  roles: SetRoleItemStructOutput[];
  maxSupply: BigNumber;
  mintPermissions: MeemPermissionStructOutput[];
  splits: SplitStructOutput[];
  isTransferLocked: boolean;
};

export type PartStruct = { account: string; value: BigNumberish };

export type PartStructOutput = [string, BigNumber] & {
  account: string;
  value: BigNumber;
};

export type MeemStruct = {
  owner: string;
  tokenType: BigNumberish;
  mintedBy: string;
  mintedAt: BigNumberish;
};

export type MeemStructOutput = [string, number, string, BigNumber] & {
  owner: string;
  tokenType: number;
  mintedBy: string;
  mintedAt: BigNumber;
};

export type MintParametersStruct = {
  to: string;
  tokenURI: string;
  tokenType: BigNumberish;
};

export type MintParametersStructOutput = [string, string, number] & {
  to: string;
  tokenURI: string;
  tokenType: number;
};

export interface MycontractInterface extends ethers.utils.Interface {
  functions: {
    "contractURI()": FunctionFragment;
    "getContractInfo()": FunctionFragment;
    "initialize((string,string,string,(address,bytes32,bool)[],uint256,(uint8,address[],uint256,uint256,uint256,uint256)[],(address,uint256,address)[],bool))": FunctionFragment;
    "reinitialize((string,string,string,(address,bytes32,bool)[],uint256,(uint8,address[],uint256,uint256,uint256,uint256)[],(address,uint256,address)[],bool))": FunctionFragment;
    "setContractInfo(string,string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "requireCanMint(address,uint256)": FunctionFragment;
    "requireCanTransfer(address,address,uint256)": FunctionFragment;
    "setIsTransferrable(bool)": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "setMintingPermissions((uint8,address[],uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "validatePermissions((uint8,address[],uint256,uint256,uint256,uint256)[],(uint8,address[],uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "ADMIN_ROLE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "bulkSetRoles((address,bytes32,bool)[])": FunctionFragment;
    "canUpgradeContract(address)": FunctionFragment;
    "getRoles(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "requireRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "handleSaleDistribution(uint256,address,uint256)": FunctionFragment;
    "lockSplits(uint256)": FunctionFragment;
    "setSplits(uint256,(address,uint256,address)[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMeem(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint((address,string,uint8))": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "requireCanMintTo(address)": FunctionFragment;
    "requireTokenAdmin(uint256,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requireCanMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCanTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTransferrable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingPermissions",
    values: [MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePermissions",
    values: [MeemPermissionStruct[], MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSetRoles",
    values: [SetRoleItemStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canUpgradeContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSaleDistribution",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSplits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplits",
    values: [BigNumberish, SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [MintParametersStruct]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCanMintTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireTokenAdmin",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireCanMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCanTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTransferrable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkSetRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUpgradeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleSaleDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockSplits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSplits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireCanMintTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "MeemContractInfoSet(address)": EventFragment;
    "MeemContractInitialized(address)": EventFragment;
    "MeemContractURISet(address)": EventFragment;
    "MeemIsTransferrableLocked()": EventFragment;
    "MeemMaxSupplyLocked()": EventFragment;
    "MeemMaxSupplySet(uint256)": EventFragment;
    "MeemMintPermissionsSet(tuple[])": EventFragment;
    "MeemRoleGranted(bytes32,address)": EventFragment;
    "MeemRoleRevoked(bytes32,address)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoleSet(bytes32,address[],address)": EventFragment;
    "MeemSplitsSet(uint256,tuple[])": EventFragment;
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MeemTransfer(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MeemContractInfoSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemContractInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemContractURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemIsTransferrableLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMaxSupplyLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMaxSupplySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMintPermissionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemSplitsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type MeemContractInfoSetEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type MeemContractInfoSetEventFilter =
  TypedEventFilter<MeemContractInfoSetEvent>;

export type MeemContractInitializedEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type MeemContractInitializedEventFilter =
  TypedEventFilter<MeemContractInitializedEvent>;

export type MeemContractURISetEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type MeemContractURISetEventFilter =
  TypedEventFilter<MeemContractURISetEvent>;

export type MeemIsTransferrableLockedEvent = TypedEvent<[], {}>;

export type MeemIsTransferrableLockedEventFilter =
  TypedEventFilter<MeemIsTransferrableLockedEvent>;

export type MeemMaxSupplyLockedEvent = TypedEvent<[], {}>;

export type MeemMaxSupplyLockedEventFilter =
  TypedEventFilter<MeemMaxSupplyLockedEvent>;

export type MeemMaxSupplySetEvent = TypedEvent<
  [BigNumber],
  { maxSupply: BigNumber }
>;

export type MeemMaxSupplySetEventFilter =
  TypedEventFilter<MeemMaxSupplySetEvent>;

export type MeemMintPermissionsSetEvent = TypedEvent<
  [MeemPermissionStructOutput[]],
  { mintPermissions: MeemPermissionStructOutput[] }
>;

export type MeemMintPermissionsSetEventFilter =
  TypedEventFilter<MeemMintPermissionsSetEvent>;

export type MeemRoleGrantedEvent = TypedEvent<
  [string, string],
  { role: string; user: string }
>;

export type MeemRoleGrantedEventFilter = TypedEventFilter<MeemRoleGrantedEvent>;

export type MeemRoleRevokedEvent = TypedEvent<
  [string, string],
  { role: string; user: string }
>;

export type MeemRoleRevokedEventFilter = TypedEventFilter<MeemRoleRevokedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type RoleSetEvent = TypedEvent<
  [string, string[], string],
  { role: string; account: string[]; sender: string }
>;

export type RoleSetEventFilter = TypedEventFilter<RoleSetEvent>;

export type MeemSplitsSetEvent = TypedEvent<
  [BigNumber, SplitStructOutput[]],
  { tokenId: BigNumber; splits: SplitStructOutput[] }
>;

export type MeemSplitsSetEventFilter = TypedEventFilter<MeemSplitsSetEvent>;

export type RoyaltiesSetEvent = TypedEvent<
  [BigNumber, PartStructOutput[]],
  { tokenId: BigNumber; royalties: PartStructOutput[] }
>;

export type RoyaltiesSetEventFilter = TypedEventFilter<RoyaltiesSetEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; operator: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type MeemTransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type MeemTransferEventFilter = TypedEventFilter<MeemTransferEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Mycontract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MycontractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getContractInfo(
      overrides?: CallOverrides
    ): Promise<[ContractInfoStructOutput]>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reinitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setContractInfo(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setContractInfo(string,string,string,uint256)"(
      name: string,
      symbol: string,
      newContractURI: string,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setContractInfo(string,string,string)"(
      name: string,
      symbol: string,
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsTransferrable(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingPermissions(
      newPermissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatePermissions(
      basePermissions: MeemPermissionStruct[],
      overridePermissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bulkSetRoles(
      items: SetRoleItemStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canUpgradeContract(
      upgrader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    grantRole(
      role: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requireRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revokeRole(
      role: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PartStructOutput[]]>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockSplits(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      tokenId: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemStructOutput]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      params: MintParametersStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requireCanMintTo(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireTokenAdmin(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  contractURI(overrides?: CallOverrides): Promise<string>;

  getContractInfo(overrides?: CallOverrides): Promise<ContractInfoStructOutput>;

  initialize(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reinitialize(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setContractInfo(string,string)"(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setContractInfo(string,string,string,uint256)"(
    name: string,
    symbol: string,
    newContractURI: string,
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setContractInfo(string,string,string)"(
    name: string,
    symbol: string,
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "requireCanMint(address,uint256)"(
    minter: string,
    msgValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requireCanMint(address,uint256)"(
    minter: string,
    msgValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requireCanTransfer(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requireCanTransfer(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsTransferrable(
    isTransferrable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    newMaxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingPermissions(
    newPermissions: MeemPermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatePermissions(
    basePermissions: MeemPermissionStruct[],
    overridePermissions: MeemPermissionStruct[],
    overrides?: CallOverrides
  ): Promise<void>;

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  bulkSetRoles(
    items: SetRoleItemStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canUpgradeContract(
    upgrader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoles(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  grantRole(
    role: BytesLike,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requireRole(
    role: BytesLike,
    user: string,
    overrides?: CallOverrides
  ): Promise<void>;

  revokeRole(
    role: BytesLike,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRaribleV2Royalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PartStructOutput[]>;

  "handleSaleDistribution(uint256,address,uint256)"(
    tokenId: BigNumberish,
    msgSender: string,
    msgValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "handleSaleDistribution(uint256,address,uint256)"(
    tokenId: BigNumberish,
    msgSender: string,
    msgValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockSplits(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    tokenId: BigNumberish,
    splits: SplitStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMeem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemStructOutput>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    params: MintParametersStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  requireCanMintTo(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireTokenAdmin(
    tokenId: BigNumberish,
    addy: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractURI(overrides?: CallOverrides): Promise<string>;

    getContractInfo(
      overrides?: CallOverrides
    ): Promise<ContractInfoStructOutput>;

    initialize(
      params: InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    reinitialize(
      params: InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractInfo(string,string)"(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractInfo(string,string,string,uint256)"(
      name: string,
      symbol: string,
      newContractURI: string,
      maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractInfo(string,string,string)"(
      name: string,
      symbol: string,
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTransferrable(
      isTransferrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingPermissions(
      newPermissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    validatePermissions(
      basePermissions: MeemPermissionStruct[],
      overridePermissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    bulkSetRoles(
      items: SetRoleItemStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    canUpgradeContract(
      upgrader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    grantRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requireRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PartStructOutput[]>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockSplits(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSplits(
      tokenId: BigNumberish,
      splits: SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemStructOutput>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      params: MintParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    requireCanMintTo(to: string, overrides?: CallOverrides): Promise<void>;

    requireTokenAdmin(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MeemContractInfoSet(address)"(
      contractAddress?: string | null
    ): MeemContractInfoSetEventFilter;
    MeemContractInfoSet(
      contractAddress?: string | null
    ): MeemContractInfoSetEventFilter;

    "MeemContractInitialized(address)"(
      contractAddress?: string | null
    ): MeemContractInitializedEventFilter;
    MeemContractInitialized(
      contractAddress?: string | null
    ): MeemContractInitializedEventFilter;

    "MeemContractURISet(address)"(
      contractAddress?: string | null
    ): MeemContractURISetEventFilter;
    MeemContractURISet(
      contractAddress?: string | null
    ): MeemContractURISetEventFilter;

    "MeemIsTransferrableLocked()"(): MeemIsTransferrableLockedEventFilter;
    MeemIsTransferrableLocked(): MeemIsTransferrableLockedEventFilter;

    "MeemMaxSupplyLocked()"(): MeemMaxSupplyLockedEventFilter;
    MeemMaxSupplyLocked(): MeemMaxSupplyLockedEventFilter;

    "MeemMaxSupplySet(uint256)"(maxSupply?: null): MeemMaxSupplySetEventFilter;
    MeemMaxSupplySet(maxSupply?: null): MeemMaxSupplySetEventFilter;

    "MeemMintPermissionsSet(tuple[])"(
      mintPermissions?: null
    ): MeemMintPermissionsSetEventFilter;
    MeemMintPermissionsSet(
      mintPermissions?: null
    ): MeemMintPermissionsSetEventFilter;

    "MeemRoleGranted(bytes32,address)"(
      role?: BytesLike | null,
      user?: string | null
    ): MeemRoleGrantedEventFilter;
    MeemRoleGranted(
      role?: BytesLike | null,
      user?: string | null
    ): MeemRoleGrantedEventFilter;

    "MeemRoleRevoked(bytes32,address)"(
      role?: BytesLike | null,
      user?: string | null
    ): MeemRoleRevokedEventFilter;
    MeemRoleRevoked(
      role?: BytesLike | null,
      user?: string | null
    ): MeemRoleRevokedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "RoleSet(bytes32,address[],address)"(
      role?: BytesLike | null,
      account?: string[] | null,
      sender?: string | null
    ): RoleSetEventFilter;
    RoleSet(
      role?: BytesLike | null,
      account?: string[] | null,
      sender?: string | null
    ): RoleSetEventFilter;

    "MeemSplitsSet(uint256,tuple[])"(
      tokenId?: null,
      splits?: null
    ): MeemSplitsSetEventFilter;
    MeemSplitsSet(tokenId?: null, splits?: null): MeemSplitsSetEventFilter;

    "RoyaltiesSet(uint256,tuple[])"(
      tokenId?: null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
    RoyaltiesSet(tokenId?: null, royalties?: null): RoyaltiesSetEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "MeemTransfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): MeemTransferEventFilter;
    MeemTransfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): MeemTransferEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getContractInfo(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reinitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setContractInfo(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setContractInfo(string,string,string,uint256)"(
      name: string,
      symbol: string,
      newContractURI: string,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setContractInfo(string,string,string)"(
      name: string,
      symbol: string,
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsTransferrable(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingPermissions(
      newPermissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatePermissions(
      basePermissions: MeemPermissionStruct[],
      overridePermissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bulkSetRoles(
      items: SetRoleItemStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canUpgradeContract(
      upgrader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockSplits(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSplits(
      tokenId: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      params: MintParametersStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCanMintTo(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireTokenAdmin(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reinitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setContractInfo(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setContractInfo(string,string,string,uint256)"(
      name: string,
      symbol: string,
      newContractURI: string,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setContractInfo(string,string,string)"(
      name: string,
      symbol: string,
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requireCanMint(address,uint256)"(
      minter: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requireCanTransfer(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsTransferrable(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingPermissions(
      newPermissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatePermissions(
      basePermissions: MeemPermissionStruct[],
      overridePermissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkSetRoles(
      items: SetRoleItemStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canUpgradeContract(
      upgrader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireRole(
      role: BytesLike,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "handleSaleDistribution(uint256,address,uint256)"(
      tokenId: BigNumberish,
      msgSender: string,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockSplits(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      tokenId: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      params: MintParametersStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCanMintTo(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireTokenAdmin(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */



export interface TypedEvent<
  TArgsArray extends Array<any> = any,
  TArgsObject = any
> extends Event {
  args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
  extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;

export interface OnEvent<TRes> {
  <TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
    listener: TypedListener<TEvent>
  ): TRes;
  (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
  infer C,
  any
>
  ? C
  : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F["deploy"]>
  : never;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */





const _abi = [
  {
    name: "MeemContractInfoSet",
    type: "event",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "MeemContractInitialized",
    type: "event",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "MeemContractURISet",
    type: "event",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "contractURI",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getContractInfo",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        components: [
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "contractURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "maxSupply",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "mintStartTimestamp",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "mintEndTimestamp",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "isTransferLocked",
            type: "bool",
            internalType: "bool",
          },
        ],
        internalType: "struct ContractInfo",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "initialize",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "contractURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "roles",
            type: "tuple[]",
            components: [
              {
                name: "user",
                type: "address",
                internalType: "address",
              },
              {
                name: "role",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "hasRole",
                type: "bool",
                internalType: "bool",
              },
            ],
            internalType: "struct SetRoleItem[]",
          },
          {
            name: "maxSupply",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "mintStartTimestamp",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "mintEndTimestamp",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "isTransferLocked",
            type: "bool",
            internalType: "bool",
          },
        ],
        internalType: "struct InitParams",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "reinitialize",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "contractURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "roles",
            type: "tuple[]",
            components: [
              {
                name: "user",
                type: "address",
                internalType: "address",
              },
              {
                name: "role",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "hasRole",
                type: "bool",
                internalType: "bool",
              },
            ],
            internalType: "struct SetRoleItem[]",
          },
          {
            name: "maxSupply",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintPermissions",
            type: "tuple[]",
            components: [
              {
                name: "permission",
                type: "uint8",
                internalType: "enum Permission",
              },
              {
                name: "addresses",
                type: "address[]",
                internalType: "address[]",
              },
              {
                name: "numTokens",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "costWei",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "mintStartTimestamp",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "mintEndTimestamp",
                type: "uint256",
                internalType: "uint256",
              },
            ],
            internalType: "struct MeemPermission[]",
          },
          {
            name: "splits",
            type: "tuple[]",
            components: [
              {
                name: "toAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "lockedBy",
                type: "address",
                internalType: "address",
              },
            ],
            internalType: "struct Split[]",
          },
          {
            name: "isTransferLocked",
            type: "bool",
            internalType: "bool",
          },
        ],
        internalType: "struct InitParams",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setContractInfo",
    type: "function",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setContractInfo",
    type: "function",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "newContractURI",
        type: "string",
        internalType: "string",
      },
      {
        name: "maxSupply",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setContractInfo",
    type: "function",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "newContractURI",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setContractURI",
    type: "function",
    inputs: [
      {
        name: "newContractURI",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "MeemIsTransferrableLocked",
    type: "event",
    inputs: [],
    anonymous: false,
  },
  {
    name: "MeemMaxSupplyLocked",
    type: "event",
    inputs: [],
    anonymous: false,
  },
  {
    name: "MeemMaxSupplySet",
    type: "event",
    inputs: [
      {
        name: "maxSupply",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    name: "MeemMintPermissionsSet",
    type: "event",
    inputs: [
      {
        name: "mintPermissions",
        type: "tuple[]",
        indexed: false,
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintStartTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintEndTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission[]",
      },
    ],
    anonymous: false,
  },
  {
    name: "MINTER_ROLE",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "pure",
  },
  {
    name: "maxSupply",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "requireCanMint",
    type: "function",
    inputs: [
      {
        name: "minter",
        type: "address",
        internalType: "address",
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "requireCanTransfer",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setIsTransferrable",
    type: "function",
    inputs: [
      {
        name: "isTransferrable",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setMaxSupply",
    type: "function",
    inputs: [
      {
        name: "newMaxSupply",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setMintingPermissions",
    type: "function",
    inputs: [
      {
        name: "newPermissions",
        type: "tuple[]",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintStartTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintEndTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "validatePermissions",
    type: "function",
    inputs: [
      {
        name: "basePermissions",
        type: "tuple[]",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintStartTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintEndTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission[]",
      },
      {
        name: "overridePermissions",
        type: "tuple[]",
        components: [
          {
            name: "permission",
            type: "uint8",
            internalType: "enum Permission",
          },
          {
            name: "addresses",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "numTokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "costWei",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintStartTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "mintEndTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct MeemPermission[]",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    name: "MeemRoleGranted",
    type: "event",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "MeemRoleRevoked",
    type: "event",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "RoleGranted",
    type: "event",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "RoleRevoked",
    type: "event",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "RoleSet",
    type: "event",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "account",
        type: "address[]",
        indexed: true,
        internalType: "address[]",
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    name: "ADMIN_ROLE",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "pure",
  },
  {
    name: "UPGRADER_ROLE",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "pure",
  },
  {
    name: "bulkSetRoles",
    type: "function",
    inputs: [
      {
        name: "items",
        type: "tuple[]",
        components: [
          {
            name: "user",
            type: "address",
            internalType: "address",
          },
          {
            name: "role",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "hasRole",
            type: "bool",
            internalType: "bool",
          },
        ],
        internalType: "struct SetRoleItem[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "canUpgradeContract",
    type: "function",
    inputs: [
      {
        name: "upgrader",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getRoles",
    type: "function",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "grantRole",
    type: "function",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "hasRole",
    type: "function",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "requireRole",
    type: "function",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "view",
  },
  {
    name: "revokeRole",
    type: "function",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "MeemSplitsSet",
    type: "event",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "splits",
        type: "tuple[]",
        indexed: false,
        components: [
          {
            name: "toAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct Split[]",
      },
    ],
    anonymous: false,
  },
  {
    name: "RoyaltiesSet",
    type: "event",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "royalties",
        type: "tuple[]",
        indexed: false,
        components: [
          {
            name: "account",
            type: "address",
            internalType: "address payable",
          },
          {
            name: "value",
            type: "uint96",
            internalType: "uint96",
          },
        ],
        internalType: "struct Part[]",
      },
    ],
    anonymous: false,
  },
  {
    name: "getRaribleV2Royalties",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        components: [
          {
            name: "account",
            type: "address",
            internalType: "address payable",
          },
          {
            name: "value",
            type: "uint96",
            internalType: "uint96",
          },
        ],
        internalType: "struct Part[]",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "handleSaleDistribution",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "msgSender",
        type: "address",
        internalType: "address",
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "lockSplits",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "setSplits",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "splits",
        type: "tuple[]",
        components: [
          {
            name: "toAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "lockedBy",
            type: "address",
            internalType: "address",
          },
        ],
        internalType: "struct Split[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "Approval",
    type: "event",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    name: "ApprovalForAll",
    type: "event",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    name: "MeemTransfer",
    type: "event",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    name: "Transfer",
    type: "event",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    name: "approve",
    type: "function",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "balanceOf",
    type: "function",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getApproved",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "getMeem",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum TokenType",
          },
          {
            name: "mintedBy",
            type: "address",
            internalType: "address",
          },
          {
            name: "mintedAt",
            type: "uint256",
            internalType: "uint256",
          },
        ],
        internalType: "struct Meem",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "handleSaleDistribution",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "msgSender",
        type: "address",
        internalType: "address",
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "isApprovedForAll",
    type: "function",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "mint",
    type: "function",
    inputs: [
      {
        name: "params",
        type: "tuple",
        components: [
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenURI",
            type: "string",
            internalType: "string",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum TokenType",
          },
        ],
        internalType: "struct MintParameters",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "name",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "ownerOf",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "requireCanMint",
    type: "function",
    inputs: [
      {
        name: "minter",
        type: "address",
        internalType: "address",
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "requireCanMintTo",
    type: "function",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "requireCanTransfer",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "requireTokenAdmin",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "addy",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "view",
  },
  {
    name: "safeTransferFrom",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "safeTransferFrom",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    name: "setApprovalForAll",
    type: "function",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "status",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    name: "supportsInterface",
    type: "function",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "symbol",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenByIndex",
    type: "function",
    inputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenOfOwnerByIndex",
    type: "function",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "tokenURI",
    type: "function",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "totalSupply",
    type: "function",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    name: "transferFrom",
    type: "function",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
];

export class Mycontract__factory {
  static readonly abi = _abi;
  static createInterface(): MycontractInterface {
    return new utils.Interface(_abi) as MycontractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Mycontract {
    return new Contract(address, _abi, signerOrProvider) as Mycontract;
  }
}
