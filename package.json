{
	"name": "@meemproject/meem-api",
	"version": "1.21.2",
	"description": "Meem API",
	"main": "build/server.js",
	"engines": {
		"node": "^16"
	},
	"scripts": {
		"########## Build ##########": "",
		"clean": "rm -rf build/*",
		"build": "npm run clean ; tsc ; echo \"Finished Building\"",
		"release": "semantic-release",
		"heroku-prebuild": "yarn remove puppeteer puppeteer-extra puppeteer-extra-plugin-adblocker puppeteer-extra-plugin-stealth -D && yarn add puppeteer@^13.1.3 puppeteer-extra@^3.2.3 puppeteer-extra-plugin-adblocker@^2.12.0 puppeteer-extra-plugin-stealth@^2.9.0",
		"heroku-cleanup": "cp .yarnclean.ci .yarnclean && yarn autoclean --force",
		"########## Run ##########": "",
		"start": "NODE_ENV=local RUN_PRODUCTION=true ENABLE_GUNDB=false GENERATE_SHARED_TYPES=false node ./build/src/server.js",
		"start-cron": "RUN_PRODUCTION=true node build/cron/cron.js",
		"cron": "npm run kill-inspect && NODE_ENV=local PORT=3005 tsnd --inspect=4006 --respawn --transpile-only --ignore-watch=src/types/meem.generated.ts --ignore-watch=src/types/meem.public.generated.ts src/cron/cron.ts",
		"local": "npm run kill-inspect && NODE_ENV=local PORT=3005 tsnd --exit-child --inspect=4005 --respawn --transpile-only --ignore-watch=src/types/meem.generated.ts --ignore-watch=src/types/meem.public.generated.ts src/server.ts",
		"########## DB Migrations ##########": "",
		"migration:create": "sequelize migration:create",
		"db:migrate": "sequelize db:migrate",
		"db:migrate:local": "NODE_ENV=local node ./node_modules/.bin/sequelize db:migrate",
		"db:migrate:development": "NODE_ENV=development node ./node_modules/.bin/sequelize db:migrate",
		"db:migrate:stage": "NODE_ENV=staging node ./node_modules/.bin/sequelize db:migrate",
		"db:migrate:production": "NODE_ENV=production node ./node_modules/.bin/sequelize db:migrate",
		"########## Tests ##########": "",
		"test": "NODE_ENV=local DISABLE_MIGRATIONS=true ALLOW_NON_SSL=true ORM_LOGGING=false LOG_LEVEL=debug TESTING=true ENABLE_GUNDB=false GENERATE_SHARED_TYPES=false DISCORD_ENABLE_LISTENERS=false PORT= mocha --exit -r ts-node/register/transpile-only 'src/**/*.test.ts'",
		"#test": "DISABLE_ORM_SYNC=false NODE_ENV=local DISABLE_MIGRATIONS=true ALLOW_NON_SSL=true ORM_LOGGING=false LOG_LEVEL=debug TESTING=true ENABLE_GUNDB=false GENERATE_SHARED_TYPES=false PORT= DATABASE_URL=sqlite:./tmp/testing.db ENABLE_CONTRACT_LISTENERS=false ENABLE_TWITTER_LISTENERS=false mocha --exit -r ts-node/register/transpile-only 'src/**/*.test.ts'",
		"########## Serverless ##########": "",
		"deploy:dev": "SLS_DEBUG=* sls deploy -s dev",
		"deploy:staging": "SLS_DEBUG=* sls deploy -s staging",
		"deploy:production": "SLS_DEBUG=* sls deploy -s production",
		"docker:clean": "docker exec -it deploy_linux bash -i -c \"cd /app; rm -rf node_modules\"",
		"docker:installYarn": "docker exec -it deploy_linux bash -i -c \"cd /app; npm i -g yarn\"",
		"docker:install": "docker exec -it deploy_linux bash -i -c \"cd /app; yarn\"",
		"docker:build": "docker exec -it deploy_linux bash -i -c \"cd /app; yarn build\"",
		"docker:deploy:dev": "docker exec -it deploy_linux bash -i -c \"cd /app; source src/.env.dev; yarn deploy:dev\"",
		"docker:deploy:staging": "npm run build:serverless && docker exec -it deploy_linux bash -i -c \"cd /app; source src/.env.staging.sls; npm install --production && npm run deploy:staging\"",
		"docker:deploy:production": "npm run build:serverless && docker exec -it deploy_linux bash -i -c \"cd /app; source src/.env.production.sls; rm -rf node_modules && npm install --production && npm run deploy:production\"",
		"########## Lint ##########": "",
		"lint": "eslint '**/*.ts' --ignore-pattern '**/*.test.ts' --ignore-pattern '**/tests/**/*.ts' --ignore-pattern '**/serverless/**/*.ts' && tsc -p tsconfig.json --noEmit",
		"lint:fix": "eslint --fix '**/*.ts'",
		"########## Misc ##########": "",
		"cost": "cost-of-modules",
		"postinstall": "if [ \"${RUN_POSTINSTALL:=\"false\"}\" = \"true\" ]; then npm run build; else echo \"Skipping postinstall RUN_POSTINSTALL is not set to true.\" && exit 0; fi",
		"kill-inspect": "kill-port 4005",
		"########## Meems ##########": "",
		"#generateTypes": "typechain --target=ethers-v5 'src/abis/*.json' --out-dir='src/types'",
		"fetchMeemABI": "tsnd --transpile-only src/scripts/fetchMeemABI.ts",
		"fetchWhitelist": "tsnd --transpile-only src/scripts/fetchWhitelist.ts",
		"fetchAccess": "tsnd --transpile-only src/scripts/fetchAccess.ts",
		"fetchMeemIdABI": "tsnd --transpile-only src/scripts/fetchMeemIdABI.ts",
		"fetchMeemMarketABI": "tsnd --transpile-only src/scripts/fetchMeemMarketABI.ts",
		"fetchMeemContracts": "tsnd --transpile-only src/scripts/fetchMeemContracts.ts",
		"fetchMeemIdContracts": "tsnd --transpile-only src/scripts/fetchMeemIdContracts.ts",
		"fetchContracts": "yarn fetchMeemContracts && yarn fetchMeemIdContracts",
		"swagger": "npx swagger-inline 'src/types/shared/api/**/*.ts' --base 'src/types/shared/api/swaggerBase.yaml' --format .json > 'src/types/shared/api/meem-api.json'",
		"generateHasuraMetadata": "tsnd --transpile-only src/scripts/generateHasuraMetadata.ts",
		"migrateSymphony": "tsnd --transpile-only src/scripts/migrateSymphony.ts",
		"syncDiscordCommands": "tsnd --transpile-only src/scripts/syncDiscordCommands.ts"
	},
	"dependencies": {
		"@discordjs/rest": "^1.6.0",
		"@guildxyz/sdk": "^1.1.1",
		"@kengoldfarb/log": "^1.0.3",
		"@meemproject/meem-contracts": "^0.17.1",
		"@meemproject/metadata": "^0.17.1",
		"@pinata/sdk": "^1.1.26",
		"@segment/analytics-node": "^1.0.0-beta.23",
		"@slack/oauth": "^2.6.0",
		"@slack/web-api": "^6.8.1",
		"@supabase/supabase-js": "^2.21.0",
		"@tableland/sdk": "^3.1.5",
		"@typechain/ethers-v5": "^10.1.0",
		"alchemy-sdk": "^2.1.1",
		"auth0": "^2.42.0",
		"bcrypt": "^5.0.1",
		"body-parser": "^1.20.0",
		"busboy": "^0.3.1",
		"cookie-parser": "^1.4.6",
		"discord-interactions": "^3.3.0",
		"discord.js": "^14.8.0",
		"dotenv": "^16.0.2",
		"ethers": "^5.7.1",
		"ethers-multisend": "^2.4.0",
		"express": "^4.18.1",
		"fs-extra": "^10.1.0",
		"globby": "^11.0.4",
		"jsonwebtoken": "^8.5.1",
		"keccak256": "^1.0.6",
		"lodash": "^4.17.21",
		"luxon": "^3.0.4",
		"merkletreejs": "^0.2.32",
		"node-fetch": "^2",
		"openai": "^3.2.1",
		"pg": "^8.8.0",
		"sequelize": "^6.23.2",
		"sharp": "^0.31.0",
		"slug": "^8.0.0",
		"string-argv": "^0.3.1",
		"superagent": "^8.0.0",
		"supertest": "^6.2.4",
		"tslib": "^2.4.1",
		"twitter-api-sdk": "^1.2.1",
		"twitter-api-v2": "^1.12.7",
		"typechain": "^8.1.0",
		"umzug": "^2.3.0",
		"uuid": "^9.0.0",
		"ws": "^8.9.0"
	},
	"devDependencies": {
		"@kengoldfarb/semantic-release-config": "^1.0.0",
		"@types/auth0": "^2.35.3",
		"@types/aws-lambda": "^8.10.106",
		"@types/bcrypt": "^5.0.0",
		"@types/busboy": "^0.3.1",
		"@types/chai": "^4.3.3",
		"@types/chai-as-promised": "^7.1.5",
		"@types/cookie-parser": "^1.4.3",
		"@types/cron": "^2.0.0",
		"@types/dotenv": "^8.2.0",
		"@types/express": "^4.17.14",
		"@types/faker": "^5",
		"@types/fs-extra": "^9.0.13",
		"@types/json2csv": "^5.0.3",
		"@types/jsonwebtoken": "^8.5.9",
		"@types/lodash": "^4.14.185",
		"@types/luxon": "^3.0.1",
		"@types/mkdirp": "^1.0.2",
		"@types/mocha": "^10.0.0",
		"@types/multer": "^1.4.7",
		"@types/node": "^18.7.23",
		"@types/node-fetch": "^2.6.2",
		"@types/pg": "^8.6.5",
		"@types/sharp": "^0.31.0",
		"@types/slug": "^5.0.3",
		"@types/supertest": "^2.0.12",
		"@types/umzug": "^2.3.2",
		"@types/uuid": "^8.3.4",
		"@types/ws": "^8.5.3",
		"aws-lambda": "^1.0.7",
		"aws-sdk": "^2.1225.0",
		"babel-eslint": "^10.1.0",
		"chai": "^4.3.6",
		"chai-as-promised": "^7.1.1",
		"chokidar-cli": "^3.0.0",
		"concurrently": "^7.4.0",
		"cron": "^2.1.0",
		"eslint": "^8.39.0",
		"eslint-config-kengoldfarb": "^1.4.5",
		"eslint-plugin-prettier": "^4.2.1",
		"faker": "^5.5.3",
		"kill-port": "^1.6.1",
		"mocha": "^10.0.0",
		"prettier": "^2.7.1",
		"puppeteer": "^18.0.5",
		"puppeteer-extra": "^3.3.4",
		"puppeteer-extra-plugin-adblocker": "^2.13.5",
		"puppeteer-extra-plugin-stealth": "^2.11.1",
		"sequelize-cli": "^6.5.1",
		"serverless": "^3.22.0",
		"serverless-prune-plugin": "^2.0.1",
		"sqlite3": "^5.1.1",
		"sqs-consumer": "^5.7.0",
		"swagger-inline": "^6.1.0",
		"ts-node": "^10.9.1",
		"ts-node-dev": "^2.0.0",
		"typescript": "^4.8.4"
	},
	"optionalDependencies": {
		"fsevents": "^2.3.2"
	}
}
